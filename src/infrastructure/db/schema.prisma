generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model media {
  media_id   BigInt    @id(map: "Media_pkey")
  url        String    @unique(map: "media_url_unique") @db.VarChar(10000)
  type       mediatype
  created_at DateTime  @db.Timestamptz(0)
  post_id    BigInt
  posts      posts     @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "media_post_id_foreign")
}

model organizations {
  organization_id     BigInt                @id(map: "Organizations_pkey")
  name                String                @unique(map: "organizations_name_unique") @db.VarChar(255)
  type                organizationtype
  address             String                @db.VarChar(255)
  organizations_tools organizations_tools[]
  posts               posts[]
  tools               tools[]
}

model organizations_tools {
  id              BigInt        @id(map: "Organizations_tools_pkey")
  organization_id BigInt
  tool_id         BigInt
  organizations   organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "organizations_tools_organization_id_foreign")
}

model posts {
  post_id         BigInt        @id(map: "Posts_pkey")
  organization_id BigInt
  title           String        @db.VarChar(255)
  text            String?
  created_at      DateTime      @db.Timestamptz(0)
  updated_at      DateTime      @db.Timestamptz(0)
  media           media[]
  organizations   organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "posts_organization_id_foreign")
  posts_tags      posts_tags[]
}

model posts_tags {
  id      BigInt @id(map: "Posts_tags_pkey")
  post_id BigInt
  tag_id  BigInt
  posts   posts  @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "posts_tags_post_id_foreign")
  tags    tags   @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction, map: "posts_tags_tag_id_foreign")
}

model tags {
  tag_id     BigInt       @id(map: "Tags_pkey")
  name       String       @unique(map: "tags_name_unique") @db.VarChar(255)
  posts_tags posts_tags[]
}

model tools {
  tool_id         BigInt        @id
  name            BigInt        @unique(map: "tools_name_unique")
  content         Json
  organization_id BigInt
  organizations   organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "tools_organization_id_foreign")
}

enum mediatype {
  image
  video
  gif
}

enum organizationtype {
  coffee
  cafe
  restaurant
  tea
}
